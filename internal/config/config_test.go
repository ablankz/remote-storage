package config_test

import (
	"os"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"

	"github.com/ablankz/remote-storage/internal/config"
)

func TestGet(t *testing.T) {
	// Unset environment variables for test
	envKeys := []string{
		"GATEWAY_HOST",
		"GATEWAY_PORT",
		"GATEWAY_DEBUGGING_PORT",
		"LOGGER_HOST",
		"LOGGER_PORT",
		"LOGGER_DEBUGGING_PORT",
		"AUTH_HOST",
		"AUTH_PORT",
		"AUTH_DEBUGGING_PORT",
		"ORCHESTRATOR_HOST",
		"ORCHESTRATOR_PORT",
		"ORCHESTRATOR_DEBUGGING_PORT",
		"REPOSITORY_HOST",
		"REPOSITORY_PORT",
		"REPOSITORY_DEBUGGING_PORT",
		"STORAGE_HOST",
		"STORAGE_PORT",
		"STORAGE_DEBUGGING_PORT",
		"DB_HOST",
		"DB_PORT",
		"DB_NAME",
		"DB_USERNAME",
		"DB_PASSWORD",
		"DB_URL",
		"STORAGE_PATH",
		"APP_DEBUG",
		"APP_ENV",
		"FAKE_TIME",
		"LOG_LEVEL",
	}
	for _, v := range envKeys {
		t.Setenv(v, "")
		os.Unsetenv(v)
	}

	cases := []struct {
		name   string
		env    map[string]string
		out    *config.Config
		failed bool
	}{
		{
			name: "minimum",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			out: &config.Config{
				GatewayHost:               "localhost",
				GatewayPort:               50051,
				GatewayDebuggingPort:      2345,
				LoggerHost:                "localhost",
				LoggerPort:                50052,
				LoggerDebuggingPort:       2346,
				AuthHost:                  "localhost",
				AuthPort:                  50053,
				AuthDebuggingPort:         2347,
				OrchestratorHost:          "localhost",
				OrchestratorPort:          50054,
				OrchestratorDebuggingPort: 2348,
				RepositoryHost:            "localhost",
				RepositoryPort:            50055,
				RepositoryDebuggingPort:   2349,
				StorageHost:               "localhost",
				StoragePort:               50056,
				StorageDebuggingPort:      2350,
				DBHost:                    "localhost",
				DBPort:                    5432,
				DBName:                    "app",
				DBUsername:                "user",
				DBUrl:                     "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				StoragePath:               "/path/to/storage/dir",
				AppEnv:                    "production",
				LogLevel:                  "info",
			},
		},
		{
			name: "full",
			env: map[string]string{
				"GATEWAY_HOST":                "gateway",
				"GATEWAY_PORT":                "3000",
				"GATEWAY_DEBUGGING_PORT":      "2346",
				"LOGGER_HOST":                 "logger",
				"LOGGER_PORT":                 "3001",
				"LOGGER_DEBUGGING_PORT":       "2347",
				"AUTH_HOST":                   "auth",
				"AUTH_PORT":                   "3002",
				"AUTH_DEBUGGING_PORT":         "2348",
				"ORCHESTRATOR_HOST":           "orchestrator",
				"ORCHESTRATOR_PORT":           "3003",
				"ORCHESTRATOR_DEBUGGING_PORT": "2349",
				"REPOSITORY_HOST":             "repository",
				"REPOSITORY_PORT":             "3004",
				"REPOSITORY_DEBUGGING_PORT":   "2350",
				"STORAGE_HOST":                "storage",
				"STORAGE_PORT":                "3005",
				"STORAGE_DEBUGGING_PORT":      "2351",
				"DB_HOST":                     "db",
				"DB_PORT":                     "9999",
				"DB_NAME":                     "app",
				"DB_USERNAME":                 "user",
				"DB_PASSWORD":                 "password",
				"DB_URL":                      "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":                "/path/to/storage/dir",
				"APP_DEBUG":                   "true",
				"APP_ENV":                     "staging",
				"FAKE_TIME":                   "true",
				"LOG_LEVEL":                   "debug",
			},
			out: &config.Config{
				GatewayHost:               "gateway",
				GatewayPort:               3000,
				GatewayDebuggingPort:      2346,
				LoggerHost:                "logger",
				LoggerPort:                3001,
				LoggerDebuggingPort:       2347,
				AuthHost:                  "auth",
				AuthPort:                  3002,
				AuthDebuggingPort:         2348,
				OrchestratorHost:          "orchestrator",
				OrchestratorPort:          3003,
				OrchestratorDebuggingPort: 2349,
				RepositoryHost:            "repository",
				RepositoryPort:            3004,
				RepositoryDebuggingPort:   2350,
				StorageHost:               "storage",
				StoragePort:               3005,
				StorageDebuggingPort:      2351,
				DBHost:                    "db",
				DBPort:                    9999,
				DBName:                    "app",
				DBUsername:                "user",
				DBPassword:                "password",
				DBUrl:                     "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				StoragePath:               "/path/to/storage/dir",
				AppDebug:                  true,
				AppEnv:                    "staging",
				FakeTime: config.FakeTimeMode{
					Enabled: true,
					Time:    config.DefaultFakeTime,
				},
				LogLevel: "debug",
			},
		},
		{
			name: "FAKE_TIME is RFC3339 string",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"FAKE_TIME":    "2023-01-02T12:34:56Z",
				"LOG_LEVEL":    "info",
			},
			out: &config.Config{
				GatewayHost:               "localhost",
				GatewayPort:               50051,
				GatewayDebuggingPort:      2345,
				LoggerHost:                "localhost",
				LoggerPort:                50052,
				LoggerDebuggingPort:       2346,
				AuthHost:                  "localhost",
				AuthPort:                  50053,
				AuthDebuggingPort:         2347,
				OrchestratorHost:          "localhost",
				OrchestratorPort:          50054,
				OrchestratorDebuggingPort: 2348,
				RepositoryHost:            "localhost",
				RepositoryPort:            50055,
				RepositoryDebuggingPort:   2349,
				StorageHost:               "localhost",
				StoragePort:               50056,
				StorageDebuggingPort:      2350,
				DBHost:                    "localhost",
				DBPort:                    5432,
				DBName:                    "app",
				DBUsername:                "user",
				DBUrl:                     "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				StoragePath:               "/path/to/storage/dir",
				AppEnv:                    "production",
				LogLevel:                  "info",
				FakeTime: config.FakeTimeMode{
					Enabled: true,
					Time:    time.Date(2023, 1, 2, 12, 34, 56, 0, time.UTC),
				},
			},
		},
		{
			name: "FAKE_TIME is true",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"FAKE_TIME":    "true",
				"LOG_LEVEL":    "info",
			},
			out: &config.Config{
				GatewayHost:               "localhost",
				GatewayPort:               50051,
				GatewayDebuggingPort:      2345,
				LoggerHost:                "localhost",
				LoggerPort:                50052,
				LoggerDebuggingPort:       2346,
				AuthHost:                  "localhost",
				AuthPort:                  50053,
				AuthDebuggingPort:         2347,
				OrchestratorHost:          "localhost",
				OrchestratorPort:          50054,
				OrchestratorDebuggingPort: 2348,
				RepositoryHost:            "localhost",
				RepositoryPort:            50055,
				RepositoryDebuggingPort:   2349,
				StorageHost:               "localhost",
				StoragePort:               50056,
				StorageDebuggingPort:      2350,
				DBHost:                    "localhost",
				DBPort:                    5432,
				DBName:                    "app",
				DBUsername:                "user",
				DBUrl:                     "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				StoragePath:               "/path/to/storage/dir",
				AppEnv:                    "production",
				LogLevel:                  "info",
				FakeTime: config.FakeTimeMode{
					Enabled: true,
					Time:    config.DefaultFakeTime,
				},
			},
		},
		{
			name: "FAKE_TIME is 1",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"FAKE_TIME":    "1",
				"LOG_LEVEL":    "info",
			},
			out: &config.Config{
				GatewayHost:               "localhost",
				GatewayPort:               50051,
				GatewayDebuggingPort:      2345,
				LoggerHost:                "localhost",
				LoggerPort:                50052,
				LoggerDebuggingPort:       2346,
				AuthHost:                  "localhost",
				AuthPort:                  50053,
				AuthDebuggingPort:         2347,
				OrchestratorHost:          "localhost",
				OrchestratorPort:          50054,
				OrchestratorDebuggingPort: 2348,
				RepositoryHost:            "localhost",
				RepositoryPort:            50055,
				RepositoryDebuggingPort:   2349,
				StorageHost:               "localhost",
				StoragePort:               50056,
				StorageDebuggingPort:      2350,
				DBHost:                    "localhost",
				DBPort:                    5432,
				DBName:                    "app",
				DBUsername:                "user",
				DBUrl:                     "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				StoragePath:               "/path/to/storage/dir",
				AppEnv:                    "production",
				LogLevel:                  "info",
				FakeTime: config.FakeTimeMode{
					Enabled: true,
					Time:    config.DefaultFakeTime,
				},
			},
		},
		{
			name: "FAKE_TIME is false",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"FAKE_TIME":    "false",
				"LOG_LEVEL":    "info",
			},
			out: &config.Config{
				GatewayHost:               "localhost",
				GatewayPort:               50051,
				GatewayDebuggingPort:      2345,
				LoggerHost:                "localhost",
				LoggerPort:                50052,
				LoggerDebuggingPort:       2346,
				AuthHost:                  "localhost",
				AuthPort:                  50053,
				AuthDebuggingPort:         2347,
				OrchestratorHost:          "localhost",
				OrchestratorPort:          50054,
				OrchestratorDebuggingPort: 2348,
				RepositoryHost:            "localhost",
				RepositoryPort:            50055,
				RepositoryDebuggingPort:   2349,
				StorageHost:               "localhost",
				StoragePort:               50056,
				StorageDebuggingPort:      2350,
				DBHost:                    "localhost",
				DBPort:                    5432,
				DBName:                    "app",
				DBUsername:                "user",
				DBUrl:                     "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				StoragePath:               "/path/to/storage/dir",
				AppEnv:                    "production",
				LogLevel:                  "info",
				FakeTime: config.FakeTimeMode{
					Enabled: false,
				},
			},
		},
		{
			name: "FAKE_TIME is 0",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"FAKE_TIME":    "0",
				"LOG_LEVEL":    "info",
			},
			out: &config.Config{
				GatewayHost:               "localhost",
				GatewayPort:               50051,
				GatewayDebuggingPort:      2345,
				LoggerHost:                "localhost",
				LoggerPort:                50052,
				LoggerDebuggingPort:       2346,
				AuthHost:                  "localhost",
				AuthPort:                  50053,
				AuthDebuggingPort:         2347,
				OrchestratorHost:          "localhost",
				OrchestratorPort:          50054,
				OrchestratorDebuggingPort: 2348,
				RepositoryHost:            "localhost",
				RepositoryPort:            50055,
				RepositoryDebuggingPort:   2349,
				StorageHost:               "localhost",
				StoragePort:               50056,
				StorageDebuggingPort:      2350,
				DBHost:                    "localhost",
				DBPort:                    5432,
				DBName:                    "app",
				DBUsername:                "user",
				DBUrl:                     "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				StoragePath:               "/path/to/storage/dir",
				AppEnv:                    "production",
				LogLevel:                  "info",
				FakeTime: config.FakeTimeMode{
					Enabled: false,
				},
			},
		},
		{
			name: "FAKE_TIME is empty string",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"FAKE_TIME":    "",
				"LOG_LEVEL":    "info",
			},
			out: &config.Config{
				GatewayHost:               "localhost",
				GatewayPort:               50051,
				GatewayDebuggingPort:      2345,
				LoggerHost:                "localhost",
				LoggerPort:                50052,
				LoggerDebuggingPort:       2346,
				AuthHost:                  "localhost",
				AuthPort:                  50053,
				AuthDebuggingPort:         2347,
				OrchestratorHost:          "localhost",
				OrchestratorPort:          50054,
				OrchestratorDebuggingPort: 2348,
				RepositoryHost:            "localhost",
				RepositoryPort:            50055,
				RepositoryDebuggingPort:   2349,
				StorageHost:               "localhost",
				StoragePort:               50056,
				StorageDebuggingPort:      2350,
				DBHost:                    "localhost",
				DBPort:                    5432,
				DBName:                    "app",
				DBUsername:                "user",
				DBUrl:                     "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				StoragePath:               "/path/to/storage/dir",
				AppEnv:                    "production",
				LogLevel:                  "info",
			},
		},
		{
			name: "invalid GATEWAY_PORT",
			env: map[string]string{
				"GATEWAY_PORT": "invalid",
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "invalid GATEWAY_DEBUGGING_PORT",
			env: map[string]string{
				"GATEWAY_DEBUGGING_PORT": "invalid",
				"DB_NAME":                "app",
				"DB_USERNAME":            "user",
				"DB_URL":                 "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":           "/path/to/storage/dir",
				"LOG_LEVEL":              "info",
			},
			failed: true,
		},
		{
			name: "invalid LOGGER_PORT",
			env: map[string]string{
				"LOGGER_PORT":  "invalid",
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "invalid LOGGER_DEBUGGING_PORT",
			env: map[string]string{
				"LOGGER_DEBUGGING_PORT": "invalid",
				"DB_NAME":               "app",
				"DB_USERNAME":           "user",
				"DB_URL":                "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":          "/path/to/storage/dir",
				"LOG_LEVEL":             "info",
			},
			failed: true,
		},
		{
			name: "invalid AUTH_PORT",
			env: map[string]string{
				"AUTH_PORT":    "invalid",
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "invalid AUTH_DEBUGGING_PORT",
			env: map[string]string{
				"AUTH_DEBUGGING_PORT": "invalid",
				"DB_NAME":             "app",
				"DB_USERNAME":         "user",
				"DB_URL":              "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":        "/path/to/storage/dir",
				"LOG_LEVEL":           "info",
			},
			failed: true,
		},
		{
			name: "invalid ORCHESTRATOR_PORT",
			env: map[string]string{
				"ORCHESTRATOR_PORT": "invalid",
				"DB_NAME":           "app",
				"DB_USERNAME":       "user",
				"DB_URL":            "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":      "/path/to/storage/dir",
				"LOG_LEVEL":         "info",
			},
			failed: true,
		},
		{
			name: "invalid ORCHESTRATOR_DEBUGGING_PORT",
			env: map[string]string{
				"ORCHESTRATOR_DEBUGGING_PORT": "invalid",
				"DB_NAME":                     "app",
				"DB_USERNAME":                 "user",
				"DB_URL":                      "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":                "/path/to/storage/dir",
				"LOG_LEVEL":                   "info",
			},
			failed: true,
		},
		{
			name: "invalid REPOSITORY_PORT",
			env: map[string]string{
				"REPOSITORY_PORT": "invalid",
				"DB_NAME":         "app",
				"DB_USERNAME":     "user",
				"DB_URL":          "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":    "/path/to/storage/dir",
				"LOG_LEVEL":       "info",
			},
			failed: true,
		},
		{
			name: "invalid REPOSITORY_DEBUGGING_PORT",
			env: map[string]string{
				"REPOSITORY_DEBUGGING_PORT": "invalid",
				"DB_NAME":                   "app",
				"DB_USERNAME":               "user",
				"DB_URL":                    "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":              "/path/to/storage/dir",
				"LOG_LEVEL":                 "info",
			},
			failed: true,
		},
		{
			name: "invalid STORAGE_PORT",
			env: map[string]string{
				"STORAGE_PORT": "invalid",
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "invalid STORAGE_DEBUGGING_PORT",
			env: map[string]string{
				"STORAGE_DEBUGGING_PORT": "invalid",
				"DB_NAME":                "app",
				"DB_USERNAME":            "user",
				"DB_URL":                 "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH":           "/path/to/storage/dir",
				"LOG_LEVEL":              "info",
			},
			failed: true,
		},
		{
			name: "invalid DB_PORT",
			env: map[string]string{
				"DB_PORT":      "invalid",
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "invalid APP_ENV",
			env: map[string]string{
				"APP_ENV":      "invalid",
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "invalid APP_DEBUG",
			env: map[string]string{
				"APP_DEBUG":    "invalid",
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "invalid FAKE_TIME",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"FAKE_TIME":    "invalid",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "invalid LOG_LEVEL",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "invalid",
			},
			failed: true,
		},
		{
			name: "missing DB_NAME",
			env: map[string]string{
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "missing DB_USERNAME",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "missing DB_URL",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"STORAGE_PATH": "/path/to/storage/dir",
				"LOG_LEVEL":    "info",
			},
			failed: true,
		},
		{
			name: "missing STORAGE_PATH",
			env: map[string]string{
				"DB_NAME":     "app",
				"DB_USERNAME": "user",
				"DB_URL":      "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"LOG_LEVEL":   "info",
			},
			failed: true,
		},
		{
			name: "missing LOG_LEVEL",
			env: map[string]string{
				"DB_NAME":      "app",
				"DB_USERNAME":  "user",
				"DB_URL":       "postgres://postgres:password@localhost:5432/rs?sslmode=disable",
				"STORAGE_PATH": "/path/to/storage/dir",
			},
			failed: true,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(tt *testing.T) {
			for key, value := range v.env {
				tt.Setenv(key, value)
			}

			cfg, err := config.Get()
			switch {
			case err != nil && !v.failed:
				tt.Fatalf("unexpected error: %+v", err)
			case err == nil && v.failed:
				tt.Fatal("unexpected success")
			case err != nil && v.failed:
				// pass
				tt.Logf("expected error: %+v", err)
				return
			}

			if diff := cmp.Diff(v.out, cfg); diff != "" {
				tt.Errorf("unexpected result:\n%s", diff)
			}
		})
	}
}
